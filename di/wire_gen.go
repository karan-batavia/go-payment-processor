// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"database/sql"
	"github.com/gofiber/fiber/v2"
	"github.com/google/wire"
	repository2 "github.com/sesaquecruz/go-payment-processor/internal/core/repository"
	service2 "github.com/sesaquecruz/go-payment-processor/internal/core/service"
	"github.com/sesaquecruz/go-payment-processor/internal/core/usecase"
	"github.com/sesaquecruz/go-payment-processor/internal/infra/repository"
	"github.com/sesaquecruz/go-payment-processor/internal/infra/service"
	"github.com/sesaquecruz/go-payment-processor/internal/infra/web"
	"github.com/sesaquecruz/go-payment-processor/internal/infra/web/handler"
)

// Injectors from wire.go:

func NewApp(db *sql.DB, options ...service.PaymentOption) *fiber.App {
	cardRepository := repository.NewCardRepository(db)
	paymentService := service.NewPaymentService(options...)
	processPayment := usecase.NewProcessPayment(cardRepository, paymentService)
	paymentHandler := handler.NewPaymentHandler(processPayment)
	app := web.InitApp(paymentHandler)
	return app
}

// wire.go:

var setCardRepository = wire.NewSet(repository.NewCardRepository, wire.Bind(new(repository2.ICardRepository), new(*repository.CardRepository)))

var setPaymentService = wire.NewSet(service.NewPaymentService, wire.Bind(new(service2.IPaymentService), new(*service.PaymentService)))

var setProcessPaymentUsecase = wire.NewSet(usecase.NewProcessPayment, wire.Bind(new(usecase.IProcessPayment), new(*usecase.ProcessPayment)))

var setPaymentHandler = wire.NewSet(handler.NewPaymentHandler, wire.Bind(new(handler.IPaymentHandler), new(*handler.PaymentHandler)))
