// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/sesaquecruz/go-payment-processor/internal/application/entity"
	mock "github.com/stretchr/testify/mock"
)

// CardMock is an autogenerated mock type for the Card type
type CardMock struct {
	mock.Mock
}

type CardMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CardMock) EXPECT() *CardMock_Expecter {
	return &CardMock_Expecter{mock: &_m.Mock}
}

// Find provides a mock function with given fields: ctx, cardToken
func (_m *CardMock) Find(ctx context.Context, cardToken string) (*entity.Card, error) {
	ret := _m.Called(ctx, cardToken)

	var r0 *entity.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Card, error)); ok {
		return rf(ctx, cardToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Card); ok {
		r0 = rf(ctx, cardToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cardToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CardMock_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type CardMock_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - cardToken string
func (_e *CardMock_Expecter) Find(ctx interface{}, cardToken interface{}) *CardMock_Find_Call {
	return &CardMock_Find_Call{Call: _e.mock.On("Find", ctx, cardToken)}
}

func (_c *CardMock_Find_Call) Run(run func(ctx context.Context, cardToken string)) *CardMock_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CardMock_Find_Call) Return(_a0 *entity.Card, _a1 error) *CardMock_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CardMock_Find_Call) RunAndReturn(run func(context.Context, string) (*entity.Card, error)) *CardMock_Find_Call {
	_c.Call.Return(run)
	return _c
}

// NewCardMock creates a new instance of CardMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCardMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CardMock {
	mock := &CardMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
