// Code generated by mockery. DO NOT EDIT.

package acquirer

import (
	context "context"
	http "net/http"

	entity "github.com/sesaquecruz/go-payment-processor/internal/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// IAcquirerMock is an autogenerated mock type for the IAcquirer type
type IAcquirerMock struct {
	mock.Mock
}

type IAcquirerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *IAcquirerMock) EXPECT() *IAcquirerMock_Expecter {
	return &IAcquirerMock_Expecter{mock: &_m.Mock}
}

// Name provides a mock function with given fields:
func (_m *IAcquirerMock) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IAcquirerMock_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type IAcquirerMock_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *IAcquirerMock_Expecter) Name() *IAcquirerMock_Name_Call {
	return &IAcquirerMock_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *IAcquirerMock_Name_Call) Run(run func()) *IAcquirerMock_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IAcquirerMock_Name_Call) Return(_a0 string) *IAcquirerMock_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IAcquirerMock_Name_Call) RunAndReturn(run func() string) *IAcquirerMock_Name_Call {
	_c.Call.Return(run)
	return _c
}

// RequestBuilder provides a mock function with given fields: _a0, _a1
func (_m *IAcquirerMock) RequestBuilder(_a0 context.Context, _a1 *entity.Transaction) (*http.Request, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *http.Request
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Transaction) (*http.Request, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Transaction) *http.Request); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Transaction) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAcquirerMock_RequestBuilder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestBuilder'
type IAcquirerMock_RequestBuilder_Call struct {
	*mock.Call
}

// RequestBuilder is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *entity.Transaction
func (_e *IAcquirerMock_Expecter) RequestBuilder(_a0 interface{}, _a1 interface{}) *IAcquirerMock_RequestBuilder_Call {
	return &IAcquirerMock_RequestBuilder_Call{Call: _e.mock.On("RequestBuilder", _a0, _a1)}
}

func (_c *IAcquirerMock_RequestBuilder_Call) Run(run func(_a0 context.Context, _a1 *entity.Transaction)) *IAcquirerMock_RequestBuilder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Transaction))
	})
	return _c
}

func (_c *IAcquirerMock_RequestBuilder_Call) Return(_a0 *http.Request, _a1 error) *IAcquirerMock_RequestBuilder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAcquirerMock_RequestBuilder_Call) RunAndReturn(run func(context.Context, *entity.Transaction) (*http.Request, error)) *IAcquirerMock_RequestBuilder_Call {
	_c.Call.Return(run)
	return _c
}

// ResponseExtractor provides a mock function with given fields: _a0
func (_m *IAcquirerMock) ResponseExtractor(_a0 *http.Response) (*entity.Payment, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Response) (*entity.Payment, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*http.Response) *entity.Payment); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Response) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAcquirerMock_ResponseExtractor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResponseExtractor'
type IAcquirerMock_ResponseExtractor_Call struct {
	*mock.Call
}

// ResponseExtractor is a helper method to define mock.On call
//   - _a0 *http.Response
func (_e *IAcquirerMock_Expecter) ResponseExtractor(_a0 interface{}) *IAcquirerMock_ResponseExtractor_Call {
	return &IAcquirerMock_ResponseExtractor_Call{Call: _e.mock.On("ResponseExtractor", _a0)}
}

func (_c *IAcquirerMock_ResponseExtractor_Call) Run(run func(_a0 *http.Response)) *IAcquirerMock_ResponseExtractor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Response))
	})
	return _c
}

func (_c *IAcquirerMock_ResponseExtractor_Call) Return(_a0 *entity.Payment, _a1 error) *IAcquirerMock_ResponseExtractor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAcquirerMock_ResponseExtractor_Call) RunAndReturn(run func(*http.Response) (*entity.Payment, error)) *IAcquirerMock_ResponseExtractor_Call {
	_c.Call.Return(run)
	return _c
}

// NewIAcquirerMock creates a new instance of IAcquirerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAcquirerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAcquirerMock {
	mock := &IAcquirerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
