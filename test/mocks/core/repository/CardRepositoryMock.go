// Code generated by mockery. DO NOT EDIT.

package repository

import (
	context "context"

	entity "github.com/sesaquecruz/go-payment-processor/internal/core/entity"
	mock "github.com/stretchr/testify/mock"
)

// CardRepositoryMock is an autogenerated mock type for the CardRepository type
type CardRepositoryMock struct {
	mock.Mock
}

type CardRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CardRepositoryMock) EXPECT() *CardRepositoryMock_Expecter {
	return &CardRepositoryMock_Expecter{mock: &_m.Mock}
}

// FindCard provides a mock function with given fields: ctx, cardToken
func (_m *CardRepositoryMock) FindCard(ctx context.Context, cardToken string) (*entity.Card, error) {
	ret := _m.Called(ctx, cardToken)

	var r0 *entity.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Card, error)); ok {
		return rf(ctx, cardToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Card); ok {
		r0 = rf(ctx, cardToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cardToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CardRepositoryMock_FindCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindCard'
type CardRepositoryMock_FindCard_Call struct {
	*mock.Call
}

// FindCard is a helper method to define mock.On call
//   - ctx context.Context
//   - cardToken string
func (_e *CardRepositoryMock_Expecter) FindCard(ctx interface{}, cardToken interface{}) *CardRepositoryMock_FindCard_Call {
	return &CardRepositoryMock_FindCard_Call{Call: _e.mock.On("FindCard", ctx, cardToken)}
}

func (_c *CardRepositoryMock_FindCard_Call) Run(run func(ctx context.Context, cardToken string)) *CardRepositoryMock_FindCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CardRepositoryMock_FindCard_Call) Return(_a0 *entity.Card, _a1 error) *CardRepositoryMock_FindCard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CardRepositoryMock_FindCard_Call) RunAndReturn(run func(context.Context, string) (*entity.Card, error)) *CardRepositoryMock_FindCard_Call {
	_c.Call.Return(run)
	return _c
}

// NewCardRepositoryMock creates a new instance of CardRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCardRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CardRepositoryMock {
	mock := &CardRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
