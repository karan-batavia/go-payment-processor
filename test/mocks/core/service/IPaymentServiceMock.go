// Code generated by mockery. DO NOT EDIT.

package service

import (
	context "context"

	entity "github.com/sesaquecruz/go-payment-processor/internal/core/entity"
	mock "github.com/stretchr/testify/mock"
)

// IPaymentServiceMock is an autogenerated mock type for the IPaymentService type
type IPaymentServiceMock struct {
	mock.Mock
}

type IPaymentServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *IPaymentServiceMock) EXPECT() *IPaymentServiceMock_Expecter {
	return &IPaymentServiceMock_Expecter{mock: &_m.Mock}
}

// ProcessTransaction provides a mock function with given fields: ctx, transaction
func (_m *IPaymentServiceMock) ProcessTransaction(ctx context.Context, transaction *entity.Transaction) (*entity.Payment, error) {
	ret := _m.Called(ctx, transaction)

	var r0 *entity.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Transaction) (*entity.Payment, error)); ok {
		return rf(ctx, transaction)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Transaction) *entity.Payment); ok {
		r0 = rf(ctx, transaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Transaction) error); ok {
		r1 = rf(ctx, transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IPaymentServiceMock_ProcessTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessTransaction'
type IPaymentServiceMock_ProcessTransaction_Call struct {
	*mock.Call
}

// ProcessTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - transaction *entity.Transaction
func (_e *IPaymentServiceMock_Expecter) ProcessTransaction(ctx interface{}, transaction interface{}) *IPaymentServiceMock_ProcessTransaction_Call {
	return &IPaymentServiceMock_ProcessTransaction_Call{Call: _e.mock.On("ProcessTransaction", ctx, transaction)}
}

func (_c *IPaymentServiceMock_ProcessTransaction_Call) Run(run func(ctx context.Context, transaction *entity.Transaction)) *IPaymentServiceMock_ProcessTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Transaction))
	})
	return _c
}

func (_c *IPaymentServiceMock_ProcessTransaction_Call) Return(_a0 *entity.Payment, _a1 error) *IPaymentServiceMock_ProcessTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IPaymentServiceMock_ProcessTransaction_Call) RunAndReturn(run func(context.Context, *entity.Transaction) (*entity.Payment, error)) *IPaymentServiceMock_ProcessTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewIPaymentServiceMock creates a new instance of IPaymentServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPaymentServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPaymentServiceMock {
	mock := &IPaymentServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
