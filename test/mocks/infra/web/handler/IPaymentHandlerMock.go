// Code generated by mockery. DO NOT EDIT.

package handler

import (
	fiber "github.com/gofiber/fiber/v2"

	mock "github.com/stretchr/testify/mock"
)

// IPaymentHandlerMock is an autogenerated mock type for the IPaymentHandler type
type IPaymentHandlerMock struct {
	mock.Mock
}

type IPaymentHandlerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *IPaymentHandlerMock) EXPECT() *IPaymentHandlerMock_Expecter {
	return &IPaymentHandlerMock_Expecter{mock: &_m.Mock}
}

// ProcessPayment provides a mock function with given fields: c
func (_m *IPaymentHandlerMock) ProcessPayment(c *fiber.Ctx) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IPaymentHandlerMock_ProcessPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessPayment'
type IPaymentHandlerMock_ProcessPayment_Call struct {
	*mock.Call
}

// ProcessPayment is a helper method to define mock.On call
//   - c *fiber.Ctx
func (_e *IPaymentHandlerMock_Expecter) ProcessPayment(c interface{}) *IPaymentHandlerMock_ProcessPayment_Call {
	return &IPaymentHandlerMock_ProcessPayment_Call{Call: _e.mock.On("ProcessPayment", c)}
}

func (_c *IPaymentHandlerMock_ProcessPayment_Call) Run(run func(c *fiber.Ctx)) *IPaymentHandlerMock_ProcessPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *IPaymentHandlerMock_ProcessPayment_Call) Return(_a0 error) *IPaymentHandlerMock_ProcessPayment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IPaymentHandlerMock_ProcessPayment_Call) RunAndReturn(run func(*fiber.Ctx) error) *IPaymentHandlerMock_ProcessPayment_Call {
	_c.Call.Return(run)
	return _c
}

// NewIPaymentHandlerMock creates a new instance of IPaymentHandlerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPaymentHandlerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPaymentHandlerMock {
	mock := &IPaymentHandlerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
